# =================================================================
# API Test Suite
# This file tests the complete user flows of the application.
# Each section represents a user journey with happy paths and edge cases.
# =================================================================

# -----------------------------------------------------------------
# Environment Variable
# -----------------------------------------------------------------
@host = http://localhost:3000


# =================================================================
# 0. ADMIN & DEBUGGING FLOW
# =================================================================

###
# @name FlushDatabase
# Deletes all records from all tables for a clean testing environment.
# NOTE: This endpoint must be created on the server for this to work.
POST {{host}}/api/admin/flush
Content-Type: application/json

{}


# =================================================================
# 1. NEW USER REGISTRATION FLOW
# =================================================================

# -----------------------------------------------------------------
# Flow 1.1: Successful Registration (Happy Path)
# -----------------------------------------------------------------

###
# @name Step1_SendOTPForRegistration
# A new user provides their phone number to receive an OTP.
POST {{host}}/api/auth/send-otp
Content-Type: application/json

{
  "identifier": "9876543210"
}

###
# @name Step2_VerifyOTPForRegistration
# The user submits the OTP to verify they own the phone number.
POST {{host}}/api/auth/verify-otp
Content-Type: application/json

{
  "identifier": "9876543210",
  "otp": "722804" 
}

###
# @name Step3_RegisterUserAccount
# With a verified phone, the user can now create their account.
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "name": "Test User One",
  "phone": "9876543210",
  "password": "password123",
  "adminCode": ""
}

# -----------------------------------------------------------------
# Flow 1.2: Registration Failure (Edge Cases)
# -----------------------------------------------------------------

###
# @name Fail_RegisterWithUnverifiedPhone
# An attempt to register without completing the OTP verification first.
# EXPECTED: 403 Forbidden with "Phone not verified via OTP"
POST {{host}}/api/auth/register
Content-Type: application/json

{
  "name": "Unverified User",
  "phone": "9999999999",
  "password": "password123"
}

###
# @name Fail_RegisterWithTakenPhoneNumber
# A user tries to register with a phone number that is already in use.
# To test: Run the successful registration flow first, then run this.
# EXPECTED: 409 Conflict from the /send-otp endpoint.
POST {{host}}/api/auth/send-otp
Content-Type: application/json

{
  "identifier": "9876543210"
}


# =================================================================
# 2. LOGIN, PROFILE & LOGOUT FLOW
# =================================================================

###
# @name Success_LoginWithEmail
# A registered user logs in with their email and password.
POST {{host}}/api/auth/login
Content-Type: application/json

{
  "identifier": "9876543210",
  "password": "password123"
}

###
# @name Success_GetProfile
# After logging in, the user requests their own profile data.
# This is a protected route and requires a valid session cookie.
GET {{host}}/api/users/me

###
# @name Fail_LoginWithWrongPassword
# A user attempts to log in with an incorrect password.
# EXPECTED: 401 Unauthorized
POST {{host}}/api/auth/login
Content-Type: application/json

{
  "identifier": "user@example.com",
  "password": "wrong-password"
}

###
# @name Success_Logout
# The logged-in user ends their session.
GET {{host}}/api/auth/logout

###
# @name Fail_GetProfileAfterLogout
# An attempt to access a protected route after the session has been destroyed.
# EXPECTED: 401 Unauthorized
GET {{host}}/api/users/me


# =================================================================
# 3. FORGOTTEN PASSWORD RESET FLOW
# =================================================================

# -----------------------------------------------------------------
# Flow 3.1: Successful Password Reset
# -----------------------------------------------------------------

###
# @name Step1_SendOTPForPasswordReset
# A user who forgot their password requests a reset OTP.
POST {{host}}/api/auth/send-otp
Content-Type: application/json

{
  "identifier": "9876543210"
}

###
# @name Step2_SubmitNewPasswordWithOTP
# The user provides their identifier, the OTP, and a new password.
POST {{host}}/api/auth/reset-password
Content-Type: application/json

{
  "phone": "9876543210",
  "email": null,
  "otp": "123456",
  "newPassword": "newPassword456"
}

# -----------------------------------------------------------------
# Flow 3.2: Password Reset Failure (Edge Case)
# -----------------------------------------------------------------

###
# @name Fail_ResetPasswordWithWrongOTP
# An attempt to reset the password using an invalid OTP.
# EXPECTED: 401 Unauthorized with "Invalid OTP"
POST {{host}}/api/auth/reset-password
Content-Type: application/json

{
  "phone": "9876543210",
  "email": null,
  "otp": "000000",
  "newPassword": "someNewPassword"
}


# =================================================================
# 4. PROFILE MANAGEMENT FLOW (LOGGED-IN USER)
# =================================================================

# NOTE: You must be logged in before running any requests in this section.

###
# @name Success_UpdateUserName
# A logged-in user updates their display name.
PUT {{host}}/api/users/update-name
Content-Type: application/json

{
  "name": "Updated Test User"
}

###
# @name Success_UpdatePassword
# A logged-in user updates their password by providing their current one.
PUT {{host}}/api/users/update-password
Content-Type: application/json

{
  "currentPassword": "password123",
  "newPassword": "newPassword456",
  "confirmPassword": "newPassword456"
}

###
# @name Fail_UpdatePasswordWithWrongCurrent
# An attempt to update password with an incorrect current password.
# EXPECTED: 401 Unauthorized
PUT {{host}}/api/users/update-password
Content-Type: application/json

{
  "currentPassword": "wrong-current-password",
  "newPassword": "newPassword789",
  "confirmPassword": "newPassword789"
}

###
# @name Success_UpdateEmailFlow
# A logged-in user updates their email via OTP verification.
# Step 1: Send OTP to the new email address.
POST {{host}}/api/auth/send-otp
Content-Type: application/json
{
  "identifier": "new.email@example.com"
}
###
# Step 2: Submit the new email and the received OTP.
PUT {{host}}/api/users/update-email
Content-Type: application/json
{
  "email": "new.email@example.com",
  "otp": "123456"
}


# =================================================================
# 5. ACCOUNT DELETION FLOW
# =================================================================

# NOTE: You must be logged in before running this request.

###
# @name Success_DeleteAccount
# The currently authenticated user deletes their own profile.
# This is a destructive and irreversible action.
DELETE {{host}}/api/users/me


# =================================================================
# 6. GENERAL API FLOWS
# =================================================================

###
# @name Success_GetAllMovies
# Fetches the list of all movies. Does not require authentication.
GET {{host}}/api/movies


### Test 1: Valid input - expecting list of shows
POST http://localhost:3000/api/shows/filter
Content-Type: application/json

{
  "movieID": 44,
  "theaterID": 16,
  "showDate": "2025-08-08"
}

###

### Test 2: Missing movieID
POST http://localhost:3000/api/shows/filter
Content-Type: application/json

{
  "theaterID": 2,
  "showDate": "2025-08-09"
}

###

### Test 3: Invalid date format
POST http://localhost:3000/api/shows/filter
Content-Type: application/json

{
  "movieID": 1,
  "theaterID": 2,
  "showDate": "09-08-2025"
}

###

### Test 4: No matching records
POST http://localhost:3000/api/shows/filter
Content-Type: application/json

{
  "movieID": 99,
  "theaterID": 99,
  "showDate": "2025-12-31"
}

###

### Test 5: SQL injection attempt (should be safely handled)
POST http://localhost:3000/api/shows/filter
Content-Type: application/json

{
  "movieID": "1; DROP TABLE Movie_Show;",
  "theaterID": 2,
  "showDate": "2025-08-09"
}
